#Color Detection + 운동량 측정 + 위험경보 알림 code 
import cv2 
import time 
import numpy as np 
import RPi.GPIO as GPIO 
#set the boozer 
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BCM) 
GPIO.setup(24,GPIO.OUT) 
#scale=[262,294,330,349,392,440,493,523] 
scale=[1040,784,1040,784,1040,784,1040,784] 
p=GPIO.PWM(24,600) 
#p.start(50) should not be here! (Booser will start form here) 
# Set the color recognition range 
# If you want a different color, change it.(Blue) 
Color_Lower = (36,130,46) 
Color_Upper = (113, 255, 255) 
# Camera Frame Range and Setting 
Frame_Width = 800 
Frame_Height = 400 
# SIZE of boxes 
TL_1=(0,0) 
BR_1=(300,200) 
TL_2 = (300,0)  
BR_2 = (600,200) 
TL_3 = (0,200) 
BR_3 = (300,400) 
TL_4 = (300,200) 
BR_4 = (600,400) 
TL_start = (600,200) 
BR_start = (800,400) 
TL_end = (600,0) 
BR_end = (800,200) 
counter_1=0 
counter_2=0 
counter_3=0 
counter_4=0 
counter_start=0 
counter_end=0 
state=[] #List to store states 
camera = cv2.VideoCapture(0) 
camera.set(cv2.CAP_PROP_FRAME_WIDTH, Frame_Width) 
camera.set(cv2.CAP_PROP_FRAME_HEIGHT, Frame_Height)
font = cv2.FONT_HERSHEY_SIMPLEX 
#try: 
while(True): 
 #Camera Option 
 ret, frame = camera.read() 
  
  
 cv2.rectangle(frame,(0,0),(300,200),(0,187,225),3) 
 cv2.putText(frame,"1",(100,140),font,2,(0,187,225),3,cv2.LINE_AA)  cv2.putText(frame,"DANGER  
Zone",(10,50),font,1.2,(0,0,225),3,cv2.LINE_AA) 
 cv2.rectangle(frame,(300,0),(600,200),(0,187,225),3) 
 cv2.putText(frame,"2",(400,140),font,2,(0,187,225),3,cv2.LINE_AA) 
 cv2.rectangle(frame,(0,200),(300,400),(0,187,225),3) 
 cv2.putText(frame,"3",(100,340),font,2,(0,187,225),3,cv2.LINE_AA) 
 cv2.rectangle(frame,(300,200),(600,400),(0,187,225),3)  cv2.putText(frame,"4",(400,340),font,2,(0,187,225),3,cv2.LINE_AA) 
 cv2.rectangle(frame,(600,0),(800,400),(0,187,225),3) 
 cv2.putText(frame,"END",(650,150),font,1.4,(0,187,225),3,cv2.LINE_AA)  cv2.putText(frame,"&",(670,190),font,1.4,(0,187,225),3,cv2.LINE_AA)  cv2.putText(frame,"START",(640,230),font,1.3,(0,187,225),3,cv2.LINE_AA)  # END is section 6, top 
 # START is section 5, bottom 
 cv2.imshow("Frame", frame) 
 # Do gaussian blur if needed 
 frame = cv2.GaussianBlur(frame, (11, 11),1) 
 # Convert to HSV color space 
 hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) 
 # Convert to binary with given color 
 mask = cv2.inRange(hsv, Color_Lower, Color_Upper) 
  
 if cv2.waitKey(1) == ord('q'): 
 break 
 # Find the contours 
 _, contours,_ = cv2.findContours(mask, cv2.RETR_EXTERNAL,  cv2.CHAIN_APPROX_SIMPLE) 
 center = None 
 if len(contours) > 0: 
 # Find the max length of contours 
 c = max(contours, key=cv2.contourArea) 
 # Find the x, y, radius of given contours  
 ((x, y), radius) = cv2.minEnclosingCircle(c) 
 # Find the moments 
 M = cv2.moments(c) 
 # mass center 
 center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))  # process every frame 
 cv2.circle(frame, (int(x), int(y)), int(radius),(0, 255, 255), 2)  cv2.circle(frame, center, 5, (0, 0, 255), -1)
  
 # Forward, backward, Turn rules  
 # Size of the recognized object 
  
 if radius < 1000 and radius > 0 :  
 if ((center[0] > TL_1[0]) and (center[0] < BR_1[0]) and (center[1]  > TL_1[1]) and (center[1] < BR_1[1])): 
 counter_1=counter_1+1 
 if ((center[0] > TL_2[0]) and (center[0] < BR_2[0]) and (center[1]  > TL_2[1]) and (center[1] < BR_2[1])): 
 counter_2=counter_2+1 
 if ((center[0] > TL_3[0]) and (center[0] < BR_3[0]) and (center[1]  > TL_3[1]) and (center[1] < BR_3[1])): 
 counter_3=counter_3+1 
 if ((center[0] > TL_4[0]) and (center[0] < BR_4[0]) and (center[1]  > TL_4[1]) and (center[1] < BR_4[1])): 
 counter_4=counter_4+1 
 if ((center[0] > TL_start[0]) and (center[0] < BR_start[0]) and  (center[1] > TL_start[1]) and (center[1] < BR_start[1])): 
 counter_start=counter_start+1 
 if ((center[0] > TL_end[0]) and (center[0] < BR_end[0]) and  (center[1] > TL_end[1]) and (center[1] < BR_end[1])): 
 counter_end += 1 
  
#cv2.putText(frame,'left',(int(Frame_Width*.1),int(Frame_Height*.5)),font,2 ,(95,176,23),3,cv2.LINE_AA) 
 if counter_start > 100: 
 state.append(5) 
 print("start") 
 counter_start=0 
 #start state =5 
 if counter_1 > 100: 
 p.start(50) 
 try: 
 for i in range(8): 
 p.ChangeFrequency(scale[i]) 
 time.sleep(0.5) 
  
 finally: 
 p.stop() 
 #GPIO.cleanup() 
 state.append(1) 
 # increase the array idex, add the state '1' element to the array  state  
 counter_1=0 
 if counter_2 > 100: 
  
 state.append(2) 
 counter_2=0 
 if counter_3 > 100: 
 state.append(3) 
 counter_3=0 
 if counter_4 > 100: 
 state.append(4) 
 counter_4=0 
 if counter_end > 100:
 counter_6=0 
 state.append(6) 
 print("end") 
 break 
 #print(state) 
print("Changes of the location : ") print(state)  
distance=0 
current_state=9 
for x in state: 
 if x==1: 
 if current_state==2 :  distance=distance+1  current_state=1 
 if current_state==3 :  distance=distance+1  current_state=1 
 if current_state==4 :  distance=distance+1.5  current_state=1  
  
 if x==2: 
 if current_state==1 :  distance=distance+1  current_state=2 
 if current_state==3 :  distance=distance+1.5  current_state=2 
 if current_state==4 :  distance=distance+1  current_state=2 
 if current_state==5 :  distance=distance+1.5  current_state=2  
 #print('distance:') 
 #print(distance) 
 #print('현재상태:' ) 
 #print(current_state)  if x==3: 
 if current_state==1 :  distance=distance+1  current_state=3 
 if current_state==2 :  distance=distance+1.5  current_state=3 
 if current_state==4 :  distance=distance+1  current_state=3  
 #print('distance:') 
 #print(distance) 
 #print('현재상태:' ) 
 #print(current_state)  if x==4: 
 if current_state==1 :
 distance=distance+1.5 
 current_state=4 
 if current_state==2 : 
 distance=distance+1 
 current_state=4 
 if current_state==3 : 
 distance=distance+1 
 current_state=4 
 if current_state==5 : 
 distance=distance+1 
 current_state=4  
 #print('distance:') 
 #print(distance) 
 #print('현재상태:' ) 
 #print(current_state) 
 if x==5: 
 current_state=5 
 if x==6: 
 if current_state==2 : 
 distance=distance+1 
 current_state=6 
 if current_state==4 : 
 distance=distance+1.5 
 current_state=6  
print(distance) 
GPIO.cleanup() 
file=open("/home/pi/tensorflow1/models/research/object_detection/distance.t xt","w") 
data='%d m' %distance 
file.write(data) 
file.close() 
camera.release() 
cv2.destroyAllWindows()
